var searchIndex = JSON.parse('{\
"axum_server":{"doc":"axum-server is a hyper server implementation designed to …","t":[3,3,3,3,0,11,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,16,16,16,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,16,16,16,16,16,16,16,16,16,16,16,8,8,16,16,10,10,10,3,3,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11],"n":["AddrIncomingConfig","Handle","HttpConfig","Server","accept","acceptor","addr_incoming_config","bind","bind","bind_rustls","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","clone","clone","clone","clone_into","clone_into","clone_into","connection_count","default","default","default","fmt","fmt","fmt","fmt","from","from","from","from","graceful_shutdown","handle","http1_half_close","http1_header_read_timeout","http1_keep_alive","http1_only","http1_preserve_header_case","http1_title_case_headers","http1_writev","http2_adaptive_window","http2_initial_connection_window_size","http2_initial_stream_window_size","http2_keep_alive_interval","http2_keep_alive_timeout","http2_max_concurrent_streams","http2_max_frame_size","http2_only","http_config","into","into","into","into","listening","max_buf_size","new","new","new","pipeline_flush","serve","service","shutdown","tcp_keepalive","tcp_nodelay","tcp_sleep_on_accept_errors","tls_rustls","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Accept","DefaultAcceptor","Future","Service","Stream","accept","accept","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","new","to_owned","try_from","try_into","type_id","Body","Body","BodyData","BodyData","BodyError","BodyError","Error","Error","Future","Future","MakeError","MakeFuture","MakeServiceRef","SendService","Service","Service","into_service","make_service","poll_ready","RustlsAcceptor","RustlsConfig","accept","acceptor","bind_rustls","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","fmt","fmt","from","from","from_config","from_der","from_pem","from_pem_file","future","get_inner","handshake_timeout","into","into","new","reload_from_config","reload_from_der","reload_from_pem","reload_from_pem_file","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","RustlsAcceptorFuture","borrow","borrow_mut","fmt","from","into","into_future","poll","try_from","try_into","try_poll","type_id"],"q":["axum_server","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","axum_server::accept","","","","","","","","","","","","","","","","","","","","axum_server::service","","","","","","","","","","","","","","","","","","","axum_server::tls_rustls","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","axum_server::tls_rustls::future","","","","","","","","","","",""],"d":["A configuration for <code>AddrIncoming</code>.","A handle for <code>Server</code>.","A configuration for <code>Http</code>.","HTTP server.","<code>Accept</code> trait and utilities.","Overwrite acceptor.","Overwrite addr incoming configuration.","Create a <code>Server</code> that will bind to provided address.","Create a server that will bind to provided address.","Create a tls server that will bind to provided address.","","","","","","","","","Builds the config, creating an owned version of it.","Builds the config, creating an owned version of it.","","","","","","","Get the number of connections.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gracefully shutdown the server.","Provide a handle for additional utilities.","Set whether HTTP/1 connections should support …","Set a timeout for reading client request headers. If a …","Enables or disables HTTP/1 keep-alive.","Sets whether HTTP1 is required.","Set whether HTTP/1 connections will write header names as …","Set whether HTTP/1 connections will write header names as …","Set whether HTTP/1 connections should try to use vectored …","Sets whether to use an adaptive flow control.","Sets the max connection-level flow control for HTTP2.","Sets the <code>SETTINGS_INITIAL_WINDOW_SIZE</code> option for HTTP2 …","Sets an interval for HTTP2 Ping frames should be sent to …","Sets a timeout for receiving an acknowledgement of the …","Sets the <code>SETTINGS_MAX_CONCURRENT_STREAMS</code> option for HTTP2 …","Sets the maximum frame size to use for HTTP2.","Sets whether HTTP2 is required.","Overwrite http configuration.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns local address and port when server starts …","Set the maximum buffer size for the connection.","Creates a default <code>AddrIncoming</code> config.","Create a new handle.","Creates a default <code>Http</code> config.","Aggregates flushes to better support pipelined responses.","Serve provided <code>MakeService</code>.","Service traits.","Shutdown the server.","Set how often to send TCP keepalive probes.","Set the value of <code>TCP_NODELAY</code> option for accepted …","Set whether to sleep on accept errors, to avoid exhausting …","Tls implementation using <code>rustls</code>.","","","","","","","","","","","","","","","","An asynchronous function to modify io stream and service.","A no-op acceptor.","Future return value.","Service produced by accept.","IO stream produced by accept.","Process io stream and service asynchronously.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new default acceptor.","","","","","","","","","","","","","","","","","Modified version of <code>MakeService</code> that takes a <code>&amp;Target</code> and …","Trait alias for <code>Service</code> with bounds required for <code>serve</code>.","","","","","","Tls acceptor using rustls.","Rustls configuration.","","Overwrite inner acceptor.","Create a tls server that will bind to provided address.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Create config from <code>Arc&lt;</code><code>ServerConfig</code><code>&gt;</code>.","Create config from DER-encoded data.","Create config from PEM formatted data.","Create config from PEM formatted files.","Future types.","Get  inner <code>Arc&lt;</code><code>ServerConfig</code><code>&gt;</code>.","Override the default TLS handshake timeout of 10 seconds, …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new rustls acceptor.","Reload config from <code>Arc&lt;</code><code>ServerConfig</code><code>&gt;</code>.","Reload config from DER-encoded data.","Reload config from PEM formatted data.","Reload config from PEM formatted files.","","","","","","","","","Future type for <code>RustlsAcceptor</code>.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,1,1,0,1,0,2,3,4,1,2,3,4,1,2,4,2,3,4,2,3,4,3,2,3,4,2,3,4,1,2,3,4,1,3,1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,2,3,4,1,3,4,2,3,4,4,1,0,3,2,2,2,0,2,3,4,2,3,4,1,2,3,4,1,2,3,4,1,0,0,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,8,7,8,7,8,7,8,7,8,8,8,0,0,7,8,7,8,8,0,0,9,9,0,9,10,9,10,9,10,9,10,9,10,9,10,10,10,10,10,0,10,9,9,10,9,10,10,10,10,9,10,9,10,9,10,9,10,0,11,11,11,11,11,11,11,11,11,11,11],"f":[null,null,null,null,null,[[],["server",3]],[[["addrincomingconfig",3]]],[[["socketaddr",4]],["server",3]],[[["socketaddr",4]]],[[["socketaddr",4],["rustlsconfig",3]],["server",3,[["rustlsacceptor",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]]],[[["",0]],["addrincomingconfig",3]],[[["",0]],["handle",3]],[[["",0]],["httpconfig",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["usize",0]],[[]],[[],["handle",3]],[[]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["",0],["option",4,[["duration",3]]]]],[[["handle",3]]],[[["",0],["bool",0]],["",0]],[[["",0],["duration",3]],["",0]],[[["",0],["bool",0]],["",0]],[[["",0],["bool",0]],["",0]],[[["",0],["bool",0]],["",0]],[[["",0],["bool",0]],["",0]],[[["",0],["bool",0]],["",0]],[[["",0],["bool",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["duration",3]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["bool",0]],["",0]],[[["httpconfig",3]]],[[]],[[]],[[]],[[]],[[["",0]]],[[["",0],["usize",0]],["",0]],[[],["addrincomingconfig",3]],[[]],[[],["httpconfig",3]],[[["",0],["bool",0]],["",0]],[[]],null,[[["",0]]],[[["",0],["option",4,[["duration",3]]]],["",0]],[[["",0],["bool",0]],["",0]],[[["",0],["bool",0]],["",0]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["defaultacceptor",3]],[[["",0],["",0]]],[[],["defaultacceptor",3]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["",0],["",0]]],[[["",0],["context",3]],["poll",4,[["result",4]]]],null,null,[[["",0]]],[[],["rustlsacceptor",3]],[[["socketaddr",4],["rustlsconfig",3]],["server",3,[["rustlsacceptor",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["rustlsacceptor",3]],[[["",0]],["rustlsconfig",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["arc",3,[["serverconfig",3]]]]],[[["vec",3,[["vec",3,[["u8",0]]]]],["vec",3,[["u8",0]]]]],[[["vec",3,[["u8",0]]],["vec",3,[["u8",0]]]]],[[]],null,[[["",0]],["arc",3,[["serverconfig",3]]]],[[["duration",3]]],[[]],[[]],[[["rustlsconfig",3]]],[[["",0],["arc",3,[["serverconfig",3]]]]],[[["",0],["vec",3,[["vec",3,[["u8",0]]]]],["vec",3,[["u8",0]]]]],[[["",0],["vec",3,[["u8",0]]],["vec",3,[["u8",0]]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["pin",3],["context",3]],["poll",4]],[[],["result",4]],[[],["result",4]],[[["pin",3],["context",3]],["poll",4]],[[["",0]],["typeid",3]]],"p":[[3,"Server"],[3,"AddrIncomingConfig"],[3,"Handle"],[3,"HttpConfig"],[8,"Accept"],[3,"DefaultAcceptor"],[8,"SendService"],[8,"MakeServiceRef"],[3,"RustlsAcceptor"],[3,"RustlsConfig"],[3,"RustlsAcceptorFuture"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};